
PwrMgmt-Atmega328p_interruptButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b3  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9a  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000081e7  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  0000a167  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000a31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000309d  00000000  00000000  0000a365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__vector_1>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	6b d0       	rcall	.+214    	; 0x14c <main>
  76:	7a c0       	rjmp	.+244    	; 0x16c <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	81 7f       	andi	r24, 0xF1	; 241
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
  82:	83 b7       	in	r24, 0x33	; 51
  84:	81 60       	ori	r24, 0x01	; 1
  86:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	83 bf       	out	0x33, r24	; 51
  8e:	88 95       	sleep
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
  96:	83 b7       	in	r24, 0x33	; 51
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
  9c:	e4 e6       	ldi	r30, 0x64	; 100
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 71       	andi	r24, 0x10	; 16
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <enable_interrupts>:
 Outputs:	none
 Description:enables interrupt INT0 (pin D2 and sets falling condition for firing) 
 ******************************************************************** */
 void enable_interrupts()
 {
	 EIMSK |= (1<<INT0);
  a8:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1<<ISC01);
  aa:	e9 e6       	ldi	r30, 0x69	; 105
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	 sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <interruptConfig>:
 Outputs:	none
 Description:sets PIND2 as input 
 ******************************************************************** */
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
  b8:	52 98       	cbi	0x0a, 2	; 10
  ba:	08 95       	ret

000000bc <__vector_1>:
Inputs:		none
Outputs:	none
Description:wakes up MCU when an external interrupt on pin PIND2 occurs
******************************************************************** */
ISR(INT0_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	cli();
  cc:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__vector_1+0x18>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x22>
  de:	00 00       	nop
	_delay_ms(50);	// prevent pin toggling due to imperfect switching
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <blink_LED_PORTD>:
Outputs:	none
Description:blinks a LED a defined number of times
******************************************************************** */
void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
  f0:	4a b1       	in	r20, 0x0a	; 10
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <blink_LED_PORTD+0xe>
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <blink_LED_PORTD+0xa>
 102:	cf 01       	movw	r24, r30
 104:	2e 2f       	mov	r18, r30
 106:	84 2b       	or	r24, r20
 108:	8a b9       	out	0x0a, r24	; 10
	for (uint8_t i = 0; i < times; i++)
 10a:	66 23       	and	r22, r22
 10c:	f1 f0       	breq	.+60     	; 0x14a <blink_LED_PORTD+0x5a>
 10e:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTD |= ( 1 << pinNumber );
		_delay_ms(100);
		PORTD &= ~( 1 << pinNumber );
 110:	3e 2f       	mov	r19, r30
 112:	30 95       	com	r19
void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
	for (uint8_t i = 0; i < times; i++)
	{
		PORTD |= ( 1 << pinNumber );
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	82 2b       	or	r24, r18
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	ff ef       	ldi	r31, 0xFF	; 255
 11c:	41 ee       	ldi	r20, 0xE1	; 225
 11e:	54 e0       	ldi	r21, 0x04	; 4
 120:	f1 50       	subi	r31, 0x01	; 1
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	50 40       	sbci	r21, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <blink_LED_PORTD+0x30>
 128:	00 c0       	rjmp	.+0      	; 0x12a <blink_LED_PORTD+0x3a>
 12a:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~( 1 << pinNumber );
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	83 23       	and	r24, r19
 130:	8b b9       	out	0x0b, r24	; 11
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	e1 ee       	ldi	r30, 0xE1	; 225
 136:	f4 e0       	ldi	r31, 0x04	; 4
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	e0 40       	sbci	r30, 0x00	; 0
 13c:	f0 40       	sbci	r31, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <blink_LED_PORTD+0x48>
 140:	00 c0       	rjmp	.+0      	; 0x142 <blink_LED_PORTD+0x52>
 142:	00 00       	nop
Description:blinks a LED a defined number of times
******************************************************************** */
void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
	for (uint8_t i = 0; i < times; i++)
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	69 13       	cpse	r22, r25
 148:	e5 cf       	rjmp	.-54     	; 0x114 <blink_LED_PORTD+0x24>
 14a:	08 95       	ret

0000014c <main>:


int main(void)
{
	/* Initialization */
	interruptConfig();
 14c:	b5 df       	rcall	.-150    	; 0xb8 <interruptConfig>
	
	while(1)
	{
		/* Some sequence */
		blink_LED_PORTD(PIND7, 3);
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	ce df       	rcall	.-100    	; 0xf0 <blink_LED_PORTD>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	8b e7       	ldi	r24, 0x7B	; 123
 158:	92 e9       	ldi	r25, 0x92	; 146
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xe>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x18>
		_delay_ms(3000);
	
		/* Power management */
		enable_interrupts();
 164:	00 00       	nop
 166:	a0 df       	rcall	.-192    	; 0xa8 <enable_interrupts>
		enterSleep();
 168:	88 df       	rcall	.-240    	; 0x7a <enterSleep>
 16a:	f1 cf       	rjmp	.-30     	; 0x14e <main+0x2>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
